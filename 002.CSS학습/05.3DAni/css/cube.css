@charset "UTF-8";
/* Rolling Cube 3D Animation css */

html,
body {
  margin: 0;
  padding: 0;
}

body {
  background-image: linear-gradient(
    to bottom,
    rgb(250, 192, 192),
    rgb(196, 196, 255)
  );
  height: 100vh;
}

/* CSS변수세팅
    :root는 최상위 주소 -> HTML:root를 의미
    html 요소가 생략되어 표현된 것
      -> 변수값 변경 애니가 필요한 경우 이점을 활용한다.
      -> html.클래스명:root{변수값 세팅} -> 변수값이 특정클래스로 변경가능
*/
:root {
  /* 큐브공통크기 */
  --cube-size: 300px;
  /* z축 거리나누기 */
  --divide-num: 2;
}

/* root인 html요소에 클래스를 부여하여 변수값을 변경한다! */
html.on:root{
    --divide-num: 1.5;
}

/* 큐브 */
.cube {
  /* 부모는 보이는 화면 */
  position: absolute;
  /* 정가운데 정렬 */
  top: calc(50% - var(--cube-size) / 2);
  left: calc(50% - var(--cube-size) / 2);
  width: var(--cube-size);
  height: var(--cube-size);

  /* outline: 2px solid red; */

  /* 
        [ 입체로 설정하기 ]
        - 입체로 설정할 요소의 부모박스에 아래와 같이 설정해준다.
        (부모는 싸고 있는 요소)
        transform-style 속성값은 아래 2가지
          1. flat (기본값) :2d
          2. preserve-3d :3d << 이 값을 설정해준다.
    */
  transform-style: preserve-3d;

  /* 입체로 보이기 위해 약간 회전함 */
  transform: rotateX(10deg) rotateY(30deg);
}

/* 작동버튼 */
.btngo{
    position: fixed;
    top: 5%;
    left: 50%;
    transform: translateX(-50%);
    font-size: 40px;
    border-radius: 10px;
    cursor: pointer;
}
/* 버튼 오버시 */
.btngo:hover{
    background-color: lime;
}

/* 큐브 각면 공통 */
.cube span {
  position: absolute;
  width: 100%;
  height: 100%;

  opacity: 0.8;

  /* 테두리 */
  box-sizing: border-box;
  border: 2px solid #ccc;

  /* outline: 2px dotted blue; */
  /* z축거리 변경에 대한 트랜지션 애니 설정 */
  transition: .5s;
}
/* 1. 앞면 */
.cube span:nth-child(1) {
    /* 배경이미지 */
    background: url(../images/seoulCity.jpg) no-repeat center/cover;

  /* z축 이동 -> translateZ 속성을 사용 / 양의 값은 앞쪽, 음의 값은 뒷쪽 */
  transform: translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 2. 오른쪽 면 */
.cube span:nth-child(2) {
    /* 배경이미지 */
    background: url(../images/newyorkCity.jpg) no-repeat right/auto 105%;

  /* y축 이동 + z축이동 : 순서 중요 */
  transform: rotateY(90deg) 
  translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 3. 뒷면 */
.cube span:nth-child(3) {
    /* 배경이미지 */
    background: url(../images/parisCity.jpg) no-repeat center/cover;

  /* y축 이동 + z축이동 : 순서 중요 */
  transform: rotateY(180deg) 
  translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 4. 왼쪽면 */
.cube span:nth-child(4) {
    /* 배경이미지 */
    background: url(../images/cityMain.jpg) no-repeat center/cover;

  /* y축 이동 + z축이동 : 순서 중요 */
  transform: rotateY(-90deg) 
  translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 5. 윗면 */
.cube span:nth-child(5) {
    /* 배경이미지 */
    background: url(../images/citys.jpg) no-repeat center/cover;

  /* x축 이동 + z축이동 : 순서 중요 */
  transform: rotateX(90deg) 
  translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 6. 아랫면 */
.cube span:nth-child(6) {
    /* 배경이미지 */
    background: url(../images/London_city.jpg) no-repeat center/cover;

  /* x축 이동 + z축이동 : 순서 중요 */
  transform: rotateX(-90deg) 
  translateZ(calc(var(--cube-size)/var(--divide-num)));
  /* 큐브 앞쪽이동은 큐브 크기의 절반 */
}

/* 큐브 애니메이션 클래스 */
.rotate-cube{
    animation: cube-ani 5s linear infinite;
    animation-play-state: paused;
}
/* 애니메이션 작동클래스 (.on 추가) */
.rotate-cube.on{
    animation-play-state: running;
}
/* 큐브 애니메이션 키프레임 */
@keyframes cube-ani {
    to{
        transform: rotateX(370deg) rotateY(390deg);
        /* 
            x축 양의 방향으로 10도에서 출발
            양의 방향 360도+10도=370도
            음의 방향 -360도+10도=-350도
            ____________________________

            y축 양의 방향으로 30도에서 출발
            양의 방향 360도+30도=390도
            음의 방향 -360도+30도=-330도
        */
    }
} /* 키프레임 */